package com.poynt.core;import android.content.Context;import android.support.annotation.NonNull;import com.poynt.core.cardstates.CardFinishedState;import com.poynt.core.cardstates.CardInsertedState;import com.poynt.core.cardstates.CardProcessingState;import com.poynt.core.cardstates.CardReadingState;import com.poynt.core.di.CoreComponent;import com.poynt.core.enums.TransactionState;import com.poynt.core.cardstates.WelcomeScreenState;import com.poynt.core.listener.CardActionInterface;import com.poynt.core.listener.CardReaderProvider;import com.poynt.core.listener.CurrentStateListener;import com.poynt.lib.states.BaseStateHandler;import com.poynt.lib.states.PoyntState;import com.poynt.lib.states.StateMachine;import com.poynt.log.Logger;public class CardStateHandler        extends BaseStateHandler<CardReaderProvider, CardActionInterface>        implements CardReaderProvider, CardActionInterface {    private static final String TAG = "CardStateHandler";    private CurrentStateListener mCurrentStateListener;    public CardStateHandler(@NonNull Context ctx) {        super();        CoreComponent.getComponentInstance().inject(this);    }    public void initiallizeListener(CurrentStateListener currentStateListener) {        this.mCurrentStateListener = currentStateListener;    }    @Override    public CardReaderProvider getStateProvider() {        Logger.d(TAG, "getStateProvider");        return this;    }    @Override    public CardActionInterface getActionInterface() {        Logger.d(TAG, "getActionInterface");        return this;    }    @Override    public void onStateMachineDescribe(StateMachine<CardReaderProvider, CardActionInterface> stateMachine) {        Logger.d(TAG, "onStateMachineDescribe");        stateMachine.addTransitionFromClass(WelcomeScreenState.class,                TransactionState.CARD_INSERTED, CardInsertedState.class);        stateMachine.addTransitionFromClass(CardInsertedState.class,                TransactionState.CARD_READING, CardReadingState.class);        stateMachine.addTransitionFromClass(CardReadingState.class,                TransactionState.TRANSACTION_IN_PROGRESS,                CardProcessingState.class);        stateMachine.addTransitionFromClass(CardProcessingState.class,                TransactionState.TRANSACTION_CANCELED, CardInsertedState.class);        stateMachine.addTransitionFromClass(CardProcessingState.class,                TransactionState.TRANSACTION_FINISHED, CardFinishedState.class);        stateMachine.addTransitionFromClass(CardFinishedState.class,                TransactionState.WELCOME_STATE, WelcomeScreenState.class);    }    @Override    public Class<? extends PoyntState> getInitialStateClass() {        Logger.d(TAG, "getInitialStateClass");        return WelcomeScreenState.class;    }    @Override    public void notifyOnStateEntered(int state) {        Logger.d(TAG, "notifyOnStateEntered");        mCurrentStateListener.OnStateEntered(state);    }    @Override    public void notifyOnStateLeft(int state) {        Logger.d(TAG, "notifyOnStateLeft");        mCurrentStateListener.OnStateLeft(state);    }}